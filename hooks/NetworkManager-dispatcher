#!/bin/sh

# Base name to give to generated dipsense configuration. The generated
# configuration files are created in the base directory with file names
# <interface>.conf. You shouldn't need to change this, instead, make
# /etc/opendispense/client.conf a symlink to the correct generated file path.
config_base_dir="/run/dhcp-opendispense"

# Use the default dispense port. Change this to match your site.
dispense_port=11020

# Per NetworkManager-dispatcher documentation.
reason="$2"
interface="$1"

# We can't execute if we don't know the interface and reason.
if [ -z "$reason" -o -z "$interface" ]; then
    exit
fi

remove_config () {
    # Remove the expiring configuration.
    rm -f "$config_base_dir/$interface.conf"

    # Purge and re-create the all-interfaces symlink, as it may have been
    # invalidated. We're just happy to get any remaining valid config, and use
    # it if we can.
    rm -f "$config_base_dir/client.conf"
    (
        cd "$config_base_dir"
        for iconf in *.conf; do
            # Don't catch the null glob, or ourself.
            if [ "$iconf" != '*.conf' -a "$iconf" != "client.conf" ]; then
                ln -s "$iconf" "client.conf"
                exit
            fi
        done
    )
}

generate_config () {
    # If the DHCP option is not present, then we're being de-configured.
    if [ -z "$DHCP4_UCC_DISPENSE_SERVER_NAME" ]; then
        remove_config
        return
    fi

    # Remove all but the first hostname, as recommended in the specification.
    dispense_server=`echo "$DHCP4_UCC_DISPENSE_SERVER_NAME" | cut -d' ' -f1`

    # Trim the trailing DNS dot.
    dispense_server=`echo "$dispense_server" | sed 's/\.$//'`

    # Write a basic config to $config_path.
    (
        echo '#'
        echo '# OpenDispense2 Client config file'
        echo '# Autogenerated by DHCP-OpenDispense2 via NetworkManager-dispatcher'
        echo "# Received on interface $interface"
        echo '#'
        echo "dispense_server $dispense_server"
        echo "dispense_port $dispense_port"
    ) > "$config_base_dir/$interface.conf"

    # Update the all-interfaces symlink, provided so users don't have to care
    # about interface names in simple cases.
    rm -f "$config_base_dir/client.conf"
    ln -s "$interface.conf" "$config_base_dir/client.conf"
}

# Ensure our working directory exists.
mkdir -p "$config_base_dir"

# We only care about events that require us to set up potentially new config,
# or that invalidate existing config.
case "$reason" in
    up|dhcp4-change)
        generate_config
        ;;

    down)
        remove_config
        ;;
esac
